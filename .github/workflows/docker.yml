name: docker
on:
  push:
    branches:
      - "development"
      - "main"

env:
  # From https://hub.docker.com/r/duncdrum/existdb/tags
  EXISTDB_VERSION: 6.2.0-debug-j8
  
  TEMPLATING_VERSION: 1.1.0
  PUBLISHER_LIB_VERSION: 4.0.0
  ROUTER_VERSION: 1.8.0

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: linux/amd64
          - os: ubuntu-24.04-arm
            arch: linux/arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare
        run: |
          platform=${{ matrix.arch }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.DOCKERHUB_REPOSITORY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./Dockerfile
          target: existdb
          build-args: |
            EXISTDB_VERSION=${{ env.EXISTDB_VERSION }}
            TEMPLATING_VERSION=${{ env.TEMPLATING_VERSION }}
            PUBLISHER_LIB_VERSION=${{ env.PUBLISHER_LIB_VERSION }}
            ROUTER_VERSION=${{ env.ROUTER_VERSION }}
          platforms: ${{ matrix.arch }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,"name=${{ vars.DOCKERHUB_REPOSITORY }}",push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Merge
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.DOCKERHUB_REPOSITORY }}
          tags: |
            type=raw,value=latest-stage,enable=${{ github.ref == 'refs/heads/development' }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=${{ env.EXISTDB_VERSION }}-core${{ env.PUBLISHER_LIB_VERSION }},enable=${{ github.ref == 'refs/heads/main' }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ vars.DOCKERHUB_REPOSITORY }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ vars.DOCKERHUB_REPOSITORY }}:${{ steps.meta.outputs.version }}

  update-description:
    name: Update Description
    runs-on: ubuntu-latest
    needs: [merge]
    if: success()
    continue-on-error: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ vars.DOCKERHUB_REPOSITORY }}
